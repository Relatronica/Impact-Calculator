{"ast":null,"code":"// Environmental Impact Calculation Utilities\n// Based on verified 2024 data sources\n\n// Conversion factors based on real 2024 data\nconst CONVERSION_FACTORS = {\n  // Car emissions: EU average 2024 = 185.4g CO2/km\n  CAR_CO2_PER_KM: 0.1854,\n  // kg CO2 per km\n\n  // LED bulb: average 10 watts\n  LED_BULB_WATTS: 10,\n  // Smartphone charging: ~19 Wh per full charge\n  SMARTPHONE_CHARGE_WH: 19,\n  // Standard water bottle: 500ml\n  WATER_BOTTLE_LITERS: 0.5,\n  // Tree CO2 sequestration: approximately 21.8 kg CO2 per year per tree\n  TREE_CO2_SEQUESTRATION_PER_YEAR: 21.8,\n  // Shower water usage: approximately 10 liters per minute\n  SHOWER_LITERS_PER_MINUTE: 10,\n  // Energy to CO2 conversion (EU grid average): ~0.3 kg CO2 per kWh\n  ENERGY_TO_CO2_KG_PER_KWH: 0.3\n};\n\n/**\n * Extract numeric values from Italian descriptive text\n * Enhanced version with better pattern matching\n */\nexport const extractMetricValue = (action, metricType) => {\n  const esempio = action.esempio_divulgativo.toLowerCase();\n  if (metricType === 'co2') {\n    // Look for CO2 values in kg\n    const kgMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)\\s*kg.*co2/);\n    if (kgMatch) {\n      return parseFloat(kgMatch[1].replace(',', '.'));\n    }\n\n    // Look for CO2 values in grams\n    const gMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)\\s*g.*co2/);\n    if (gMatch) {\n      return parseFloat(gMatch[1].replace(',', '.')) / 1000; // Convert g to kg\n    }\n\n    // Handle ranges (take average)\n    const rangeKgMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)[-–](\\d+(?:[.,]\\d+)?)\\s*kg.*co2/);\n    if (rangeKgMatch) {\n      const val1 = parseFloat(rangeKgMatch[1].replace(',', '.'));\n      const val2 = parseFloat(rangeKgMatch[2].replace(',', '.'));\n      return (val1 + val2) / 2;\n    }\n\n    // Handle decimal ranges\n    const decimalRangeMatch = esempio.match(/(\\d+[.,]\\d+)[-–](\\d+[.,]\\d+)\\s*kg.*co2/);\n    if (decimalRangeMatch) {\n      const val1 = parseFloat(decimalRangeMatch[1].replace(',', '.'));\n      const val2 = parseFloat(decimalRangeMatch[2].replace(',', '.'));\n      return (val1 + val2) / 2;\n    }\n  }\n  if (metricType === 'water') {\n    // Look for water values in liters with thousand separators\n    const literMatch = esempio.match(/(\\d+(?:[.,]\\d{3})*)\\s*l/);\n    if (literMatch) {\n      const value = literMatch[1].replace(/[.,](?=\\d{3})/g, ''); // Remove thousand separators\n      return parseFloat(value.replace(',', '.'));\n    }\n\n    // Handle ranges\n    const rangeMatch = esempio.match(/(\\d+(?:[.,]\\d{3})*)[-–](\\d+(?:[.,]\\d{3})*)\\s*l/);\n    if (rangeMatch) {\n      const val1 = parseFloat(rangeMatch[1].replace(/[.,](?=\\d{3})/g, '').replace(',', '.'));\n      const val2 = parseFloat(rangeMatch[2].replace(/[.,](?=\\d{3})/g, '').replace(',', '.'));\n      return (val1 + val2) / 2;\n    }\n\n    // Handle \"oltre\" (over) values\n    const oltreMatch = esempio.match(/oltre\\s+(\\d+(?:[.,]\\d{3})*)\\s*l/);\n    if (oltreMatch) {\n      const value = oltreMatch[1].replace(/[.,](?=\\d{3})/g, '');\n      return parseFloat(value.replace(',', '.'));\n    }\n  }\n  if (metricType === 'energy') {\n    // Look for energy values in kWh\n    const kwhMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)[-–]?(\\d+(?:[.,]\\d+)?)?\\s*kwh/);\n    if (kwhMatch) {\n      const val1 = parseFloat(kwhMatch[1].replace(',', '.'));\n      if (kwhMatch[2]) {\n        const val2 = parseFloat(kwhMatch[2].replace(',', '.'));\n        return (val1 + val2) / 2;\n      }\n      return val1;\n    }\n  }\n  return 0;\n};\n\n/**\n * Calculate CO2 equivalencies with educational examples\n */\nexport const calculateCO2Equivalents = co2Kg => {\n  if (co2Kg <= 0) return null;\n  const carKm = co2Kg / CONVERSION_FACTORS.CAR_CO2_PER_KM;\n  const treesNeeded = co2Kg / CONVERSION_FACTORS.TREE_CO2_SEQUESTRATION_PER_YEAR;\n  return {\n    carKm: Math.round(carKm * 10) / 10,\n    treesNeeded: Math.round(treesNeeded * 100) / 100,\n    examples: {\n      it: {\n        car: `Equivale a ${Math.round(carKm)} km percorsi in auto`,\n        trees: `${Math.ceil(treesNeeded)} alberi necessari per compensare (1 anno)`,\n        comparison: co2Kg > 10 ? 'Impatto elevato' : co2Kg > 2 ? 'Impatto moderato' : 'Impatto basso'\n      }\n    }\n  };\n};\n\n/**\n * Calculate water usage equivalencies with educational examples\n */\nexport const calculateWaterEquivalents = waterLiters => {\n  if (waterLiters <= 0) return null;\n  const waterBottles = waterLiters / CONVERSION_FACTORS.WATER_BOTTLE_LITERS;\n  const showerMinutes = waterLiters / CONVERSION_FACTORS.SHOWER_LITERS_PER_MINUTE;\n  return {\n    waterBottles: Math.round(waterBottles),\n    showerMinutes: Math.round(showerMinutes * 10) / 10,\n    examples: {\n      it: {\n        bottles: `Equivale a ${Math.round(waterBottles)} bottiglie d'acqua`,\n        shower: `Equivale a ${Math.round(showerMinutes)} minuti di doccia`,\n        comparison: waterLiters > 1000 ? 'Consumo elevato' : waterLiters > 100 ? 'Consumo moderato' : 'Consumo basso'\n      }\n    }\n  };\n};\n\n/**\n * Calculate energy equivalencies with educational examples\n */\nexport const calculateEnergyEquivalents = energyKwh => {\n  if (energyKwh <= 0) return null;\n  const ledBulbHours = energyKwh * 1000 / CONVERSION_FACTORS.LED_BULB_WATTS;\n  const smartphoneCharges = energyKwh * 1000 / CONVERSION_FACTORS.SMARTPHONE_CHARGE_WH;\n  const co2Equivalent = energyKwh * CONVERSION_FACTORS.ENERGY_TO_CO2_KG_PER_KWH;\n  return {\n    ledBulbHours: Math.round(ledBulbHours),\n    smartphoneCharges: Math.round(smartphoneCharges),\n    co2Equivalent: Math.round(co2Equivalent * 1000) / 1000,\n    examples: {\n      it: {\n        ledBulb: `Equivale a ${Math.round(ledBulbHours)} ore di lampadina LED`,\n        smartphone: `Equivale a ${Math.round(smartphoneCharges)} ricariche di smartphone`,\n        co2: `Produce ${Math.round(co2Equivalent * 1000)} g di CO2`,\n        comparison: energyKwh > 5 ? 'Consumo elevato' : energyKwh > 1 ? 'Consumo moderato' : 'Consumo basso'\n      }\n    }\n  };\n};\n\n/**\n * Calculate aggregated metrics for multiple actions\n */\nexport const calculateTotalMetrics = placedActions => {\n  const totals = {\n    co2: 0,\n    water: 0,\n    energy: 0,\n    actionCounts: {}\n  };\n  placedActions.forEach(action => {\n    // Count action instances\n    const actionName = action.azione;\n    totals.actionCounts[actionName] = (totals.actionCounts[actionName] || 0) + 1;\n    const metriche = action.metriche;\n\n    // CO2 calculations\n    if (metriche.some(m => m.toLowerCase().includes('co2'))) {\n      totals.co2 += extractMetricValue(action, 'co2');\n    }\n\n    // Water calculations\n    if (metriche.some(m => m.toLowerCase().includes('acqua') || m.toLowerCase().includes('litri'))) {\n      totals.water += extractMetricValue(action, 'water');\n    }\n\n    // Energy calculations\n    if (metriche.some(m => m.toLowerCase().includes('energia') || m.toLowerCase().includes('kwh'))) {\n      totals.energy += extractMetricValue(action, 'energy');\n    }\n  });\n  return totals;\n};\n\n/**\n * Get impact level classification\n */\nexport const getImpactLevel = (value, type) => {\n  if (type === 'co2') {\n    if (value < 2) return 'low';\n    if (value < 10) return 'medium';\n    return 'high';\n  }\n  if (type === 'water') {\n    if (value < 500) return 'low';\n    if (value < 2000) return 'medium';\n    return 'high';\n  }\n  if (type === 'energy') {\n    if (value < 1) return 'low';\n    if (value < 5) return 'medium';\n    return 'high';\n  }\n  return 'low';\n};\n\n/**\n * Format numbers for display\n */\nexport const formatNumber = num => {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'k';\n  }\n  if (num < 1) {\n    return num.toFixed(3);\n  }\n  return num.toFixed(2);\n};\n\n/**\n * Validate metric data integrity\n */\nexport const validateMetricData = action => {\n  const errors = [];\n  if (!action.azione) {\n    errors.push('Missing action name');\n  }\n  if (!action.metriche || !Array.isArray(action.metriche)) {\n    errors.push('Missing or invalid metrics array');\n  }\n  if (!action.esempio_divulgativo) {\n    errors.push('Missing educational example');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["CONVERSION_FACTORS","CAR_CO2_PER_KM","LED_BULB_WATTS","SMARTPHONE_CHARGE_WH","WATER_BOTTLE_LITERS","TREE_CO2_SEQUESTRATION_PER_YEAR","SHOWER_LITERS_PER_MINUTE","ENERGY_TO_CO2_KG_PER_KWH","extractMetricValue","action","metricType","esempio","esempio_divulgativo","toLowerCase","kgMatch","match","parseFloat","replace","gMatch","rangeKgMatch","val1","val2","decimalRangeMatch","literMatch","value","rangeMatch","oltreMatch","kwhMatch","calculateCO2Equivalents","co2Kg","carKm","treesNeeded","Math","round","examples","it","car","trees","ceil","comparison","calculateWaterEquivalents","waterLiters","waterBottles","showerMinutes","bottles","shower","calculateEnergyEquivalents","energyKwh","ledBulbHours","smartphoneCharges","co2Equivalent","ledBulb","smartphone","co2","calculateTotalMetrics","placedActions","totals","water","energy","actionCounts","forEach","actionName","azione","metriche","some","m","includes","getImpactLevel","type","formatNumber","num","toFixed","validateMetricData","errors","push","Array","isArray","isValid","length"],"sources":["/Users/giuseppeaceto/Downloads/speculative_design_react/final/src/utils/calculations.js"],"sourcesContent":["// Environmental Impact Calculation Utilities\n// Based on verified 2024 data sources\n\n// Conversion factors based on real 2024 data\nconst CONVERSION_FACTORS = {\n  // Car emissions: EU average 2024 = 185.4g CO2/km\n  CAR_CO2_PER_KM: 0.1854, // kg CO2 per km\n  \n  // LED bulb: average 10 watts\n  LED_BULB_WATTS: 10,\n  \n  // Smartphone charging: ~19 Wh per full charge\n  SMARTPHONE_CHARGE_WH: 19,\n  \n  // Standard water bottle: 500ml\n  WATER_BOTTLE_LITERS: 0.5,\n  \n  // Tree CO2 sequestration: approximately 21.8 kg CO2 per year per tree\n  TREE_CO2_SEQUESTRATION_PER_YEAR: 21.8,\n  \n  // Shower water usage: approximately 10 liters per minute\n  SHOWER_LITERS_PER_MINUTE: 10,\n  \n  // Energy to CO2 conversion (EU grid average): ~0.3 kg CO2 per kWh\n  ENERGY_TO_CO2_KG_PER_KWH: 0.3\n};\n\n/**\n * Extract numeric values from Italian descriptive text\n * Enhanced version with better pattern matching\n */\nexport const extractMetricValue = (action, metricType) => {\n  const esempio = action.esempio_divulgativo.toLowerCase();\n  \n  if (metricType === 'co2') {\n    // Look for CO2 values in kg\n    const kgMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)\\s*kg.*co2/);\n    if (kgMatch) {\n      return parseFloat(kgMatch[1].replace(',', '.'));\n    }\n    \n    // Look for CO2 values in grams\n    const gMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)\\s*g.*co2/);\n    if (gMatch) {\n      return parseFloat(gMatch[1].replace(',', '.')) / 1000; // Convert g to kg\n    }\n    \n    // Handle ranges (take average)\n    const rangeKgMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)[-–](\\d+(?:[.,]\\d+)?)\\s*kg.*co2/);\n    if (rangeKgMatch) {\n      const val1 = parseFloat(rangeKgMatch[1].replace(',', '.'));\n      const val2 = parseFloat(rangeKgMatch[2].replace(',', '.'));\n      return (val1 + val2) / 2;\n    }\n    \n    // Handle decimal ranges\n    const decimalRangeMatch = esempio.match(/(\\d+[.,]\\d+)[-–](\\d+[.,]\\d+)\\s*kg.*co2/);\n    if (decimalRangeMatch) {\n      const val1 = parseFloat(decimalRangeMatch[1].replace(',', '.'));\n      const val2 = parseFloat(decimalRangeMatch[2].replace(',', '.'));\n      return (val1 + val2) / 2;\n    }\n  }\n  \n  if (metricType === 'water') {\n    // Look for water values in liters with thousand separators\n    const literMatch = esempio.match(/(\\d+(?:[.,]\\d{3})*)\\s*l/);\n    if (literMatch) {\n      const value = literMatch[1].replace(/[.,](?=\\d{3})/g, ''); // Remove thousand separators\n      return parseFloat(value.replace(',', '.'));\n    }\n    \n    // Handle ranges\n    const rangeMatch = esempio.match(/(\\d+(?:[.,]\\d{3})*)[-–](\\d+(?:[.,]\\d{3})*)\\s*l/);\n    if (rangeMatch) {\n      const val1 = parseFloat(rangeMatch[1].replace(/[.,](?=\\d{3})/g, '').replace(',', '.'));\n      const val2 = parseFloat(rangeMatch[2].replace(/[.,](?=\\d{3})/g, '').replace(',', '.'));\n      return (val1 + val2) / 2;\n    }\n    \n    // Handle \"oltre\" (over) values\n    const oltreMatch = esempio.match(/oltre\\s+(\\d+(?:[.,]\\d{3})*)\\s*l/);\n    if (oltreMatch) {\n      const value = oltreMatch[1].replace(/[.,](?=\\d{3})/g, '');\n      return parseFloat(value.replace(',', '.'));\n    }\n  }\n  \n  if (metricType === 'energy') {\n    // Look for energy values in kWh\n    const kwhMatch = esempio.match(/(\\d+(?:[.,]\\d+)?)[-–]?(\\d+(?:[.,]\\d+)?)?\\s*kwh/);\n    if (kwhMatch) {\n      const val1 = parseFloat(kwhMatch[1].replace(',', '.'));\n      if (kwhMatch[2]) {\n        const val2 = parseFloat(kwhMatch[2].replace(',', '.'));\n        return (val1 + val2) / 2;\n      }\n      return val1;\n    }\n  }\n  \n  return 0;\n};\n\n/**\n * Calculate CO2 equivalencies with educational examples\n */\nexport const calculateCO2Equivalents = (co2Kg) => {\n  if (co2Kg <= 0) return null;\n  \n  const carKm = co2Kg / CONVERSION_FACTORS.CAR_CO2_PER_KM;\n  const treesNeeded = co2Kg / CONVERSION_FACTORS.TREE_CO2_SEQUESTRATION_PER_YEAR;\n  \n  return {\n    carKm: Math.round(carKm * 10) / 10,\n    treesNeeded: Math.round(treesNeeded * 100) / 100,\n    examples: {\n      it: {\n        car: `Equivale a ${Math.round(carKm)} km percorsi in auto`,\n        trees: `${Math.ceil(treesNeeded)} alberi necessari per compensare (1 anno)`,\n        comparison: co2Kg > 10 ? 'Impatto elevato' : co2Kg > 2 ? 'Impatto moderato' : 'Impatto basso'\n      }\n    }\n  };\n};\n\n/**\n * Calculate water usage equivalencies with educational examples\n */\nexport const calculateWaterEquivalents = (waterLiters) => {\n  if (waterLiters <= 0) return null;\n  \n  const waterBottles = waterLiters / CONVERSION_FACTORS.WATER_BOTTLE_LITERS;\n  const showerMinutes = waterLiters / CONVERSION_FACTORS.SHOWER_LITERS_PER_MINUTE;\n  \n  return {\n    waterBottles: Math.round(waterBottles),\n    showerMinutes: Math.round(showerMinutes * 10) / 10,\n    examples: {\n      it: {\n        bottles: `Equivale a ${Math.round(waterBottles)} bottiglie d'acqua`,\n        shower: `Equivale a ${Math.round(showerMinutes)} minuti di doccia`,\n        comparison: waterLiters > 1000 ? 'Consumo elevato' : waterLiters > 100 ? 'Consumo moderato' : 'Consumo basso'\n      }\n    }\n  };\n};\n\n/**\n * Calculate energy equivalencies with educational examples\n */\nexport const calculateEnergyEquivalents = (energyKwh) => {\n  if (energyKwh <= 0) return null;\n  \n  const ledBulbHours = (energyKwh * 1000) / CONVERSION_FACTORS.LED_BULB_WATTS;\n  const smartphoneCharges = (energyKwh * 1000) / CONVERSION_FACTORS.SMARTPHONE_CHARGE_WH;\n  const co2Equivalent = energyKwh * CONVERSION_FACTORS.ENERGY_TO_CO2_KG_PER_KWH;\n  \n  return {\n    ledBulbHours: Math.round(ledBulbHours),\n    smartphoneCharges: Math.round(smartphoneCharges),\n    co2Equivalent: Math.round(co2Equivalent * 1000) / 1000,\n    examples: {\n      it: {\n        ledBulb: `Equivale a ${Math.round(ledBulbHours)} ore di lampadina LED`,\n        smartphone: `Equivale a ${Math.round(smartphoneCharges)} ricariche di smartphone`,\n        co2: `Produce ${Math.round(co2Equivalent * 1000)} g di CO2`,\n        comparison: energyKwh > 5 ? 'Consumo elevato' : energyKwh > 1 ? 'Consumo moderato' : 'Consumo basso'\n      }\n    }\n  };\n};\n\n/**\n * Calculate aggregated metrics for multiple actions\n */\nexport const calculateTotalMetrics = (placedActions) => {\n  const totals = {\n    co2: 0,\n    water: 0,\n    energy: 0,\n    actionCounts: {}\n  };\n\n  placedActions.forEach(action => {\n    // Count action instances\n    const actionName = action.azione;\n    totals.actionCounts[actionName] = (totals.actionCounts[actionName] || 0) + 1;\n    \n    const metriche = action.metriche;\n    \n    // CO2 calculations\n    if (metriche.some(m => m.toLowerCase().includes('co2'))) {\n      totals.co2 += extractMetricValue(action, 'co2');\n    }\n    \n    // Water calculations\n    if (metriche.some(m => m.toLowerCase().includes('acqua') || m.toLowerCase().includes('litri'))) {\n      totals.water += extractMetricValue(action, 'water');\n    }\n    \n    // Energy calculations\n    if (metriche.some(m => m.toLowerCase().includes('energia') || m.toLowerCase().includes('kwh'))) {\n      totals.energy += extractMetricValue(action, 'energy');\n    }\n  });\n\n  return totals;\n};\n\n/**\n * Get impact level classification\n */\nexport const getImpactLevel = (value, type) => {\n  if (type === 'co2') {\n    if (value < 2) return 'low';\n    if (value < 10) return 'medium';\n    return 'high';\n  }\n  if (type === 'water') {\n    if (value < 500) return 'low';\n    if (value < 2000) return 'medium';\n    return 'high';\n  }\n  if (type === 'energy') {\n    if (value < 1) return 'low';\n    if (value < 5) return 'medium';\n    return 'high';\n  }\n  return 'low';\n};\n\n/**\n * Format numbers for display\n */\nexport const formatNumber = (num) => {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'k';\n  }\n  if (num < 1) {\n    return num.toFixed(3);\n  }\n  return num.toFixed(2);\n};\n\n/**\n * Validate metric data integrity\n */\nexport const validateMetricData = (action) => {\n  const errors = [];\n  \n  if (!action.azione) {\n    errors.push('Missing action name');\n  }\n  \n  if (!action.metriche || !Array.isArray(action.metriche)) {\n    errors.push('Missing or invalid metrics array');\n  }\n  \n  if (!action.esempio_divulgativo) {\n    errors.push('Missing educational example');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}